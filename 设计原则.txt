> 参考： 《head first设计模式》

## OO设计原则：
	- 封装变化
	- 多用组合，少用继承
	- 针对接口编程，不针对实现编程
	- 对交互对象之间的松耦合设计而努力
	- 对扩展开方，对修改关闭(例如: 装饰者模式)
	- 依赖抽象，不要依赖具体类(例如：工厂模式)
	- 

## OO设计模式：

### 策略者设计模式：
	
### 观察者设计模式：

### 装饰者设计模式：
	  动态的将责任附加到对象上。想要扩展功能，装饰者提供有别于继承的另一种选择，比继承更具有扩展性。(例如：java.IO包)

### 工厂设计模式：

#### 	简单工厂模式：
		  在一个类中处理创建对象的细节。
####    工厂方法模式：
		  定义了一个创建**对象**的接口，但由子类决定要实例化的类是哪一个。工厂方法让类把实例化推迟到子类。
####    抽象工厂模式：
		  提供一个接口，用于创建相关或依赖对象的**家族**，而不需要明确指定具体类。

### 单例模式
      确保类只有一个实例，并提供一个全局的访问点

### 命令模式
      将请求封装成对象，使不同的请求、日志、队列来参数化其他对象。

### 适配器模式
      将一种接口转换为用户所期望的另一种接口。
	