# DesignPattern
设计模式总结-java版

> 参考： 
- 《head first设计模式》的官方代码
- 《设计模式-可复用面向对象软件的基础》
- 《Effective java》
- 某位博主的总结http://download.csdn.net/detail/undergrowth/8306683
- http://www.runoob.com/design-pattern/design-pattern-tutorial.html
- http://www.runoob.com/design-pattern/design-pattern-intro.html


## OO设计原则：
>	
	- 封装变化
	- 多用组合，少用继承
	- 针对接口编程，不针对实现编程
	- 对交互对象之间的松耦合设计而努力
	- 对扩展开方，对修改关闭(例如: 装饰者模式)
	- 依赖抽象，不要依赖具体类(例如：工厂模式)
	- 最少知识原则：只和你的密友交谈

1、**开闭原则**（Open Close Principle）
　　开闭原则的意思是：对扩展开放，对修改关闭。在程序需要进行拓展的时候，不能去修改原有的代码，实现一个热插拔的效果。简言之，是为了使程序的扩展性好，易于维护和升级。想要达到这样的效果，我们需要使用接口和抽象类，后面的具体设计中我们会提到这点。
2、**里氏代换原则**（Liskov Substitution Principle）
　　里氏代换原则是面向对象设计的基本原则之一。 里氏代换原则中说，任何基类可以出现的地方，子类一定可以出现。LSP 是继承复用的基石，只有当派生类可以替换掉基类，且软件单位的功能不受到影响时，基类才能真正被复用，而派生类也能够在基类的基础上增加新的行为。里氏代换原则是对开闭原则的补充。实现开闭原则的关键步骤就是抽象化，而基类与子类的继承关系就是抽象化的具体实现，所以里氏代换原则是对实现抽象化的具体步骤的规范。
3、**依赖倒转原则**（Dependence Inversion Principle）
　　这个原则是开闭原则的基础，具体内容：针对接口编程，依赖于抽象而不依赖于具体。
4、**接口隔离原则**（Interface Segregation Principle）
　　这个原则的意思是：使用多个隔离的接口，比使用单个接口要好。它还有另外一个意思是：降低类之间的耦合度。由此可见，其实设计模式就是从大型软件架构出发、便于升级和维护的软件设计思想，它强调降低依赖，降低耦合。
5、**迪米特法则**，又称最少知道原则（Demeter Principle）
　　最少知道原则是指：一个实体应当尽量少地与其他实体之间发生相互作用，使得系统功能模块相对独立。
6、**合成复用原则**（Composite Reuse Principle）
　　合成复用原则是指：尽量使用合成/聚合的方式，而不是使用继承。

## 警告：
	  - 过度使用设计模式可能导致代码被过度工程化。应该总是用最简单的解决方案完成工作，并在真正需要模式的地方才使用它。

# OO设计模式：

## 创建型：

### 单例模式(Singleton)
      确保类只有一个实例，并提供一个全局的访问点

### 工厂模式(Factory)：

#### 	简单工厂模式(Simple Factory)：
		  在一个类中处理创建对象的细节。
####    工厂方法模式(Factory Method)：
		  定义了一个创建**对象**的接口，但由子类决定要实例化的类是哪一个。工厂方法让类把实例化推迟到子类。
####    抽象工厂模式(Abstract Factory)：
		  提供一个接口，用于创建相关或依赖对象的**家族**，而不需要明确指定具体类。

### 生成器模式(Builder):
	  将一个复杂对象的构建与他的“部件及组装方式”相分离，，使得构件算法和组装方式可以独立应对变化，使得同样的构建过程可以创建不同的表示，不同的构建过程可以复用相同的部件组装方式。
	  
### 原型模式(Prototype):
	  用原型实例指定创建对象的种类，并且通过拷贝这些原型来创建新的对象。

## 结构型：

### 组合模式(Composite)
	   允许你将对象组成树形结构来表现“整体/部分”的层次结构。组合能让客户以一致的方式处理个别对象和对象组合。

### 外观模式(Facade)
      提供了系统的一个简化的高层接口，用来简化访问系统的一群接口


### 代理模式(Proxy)：
	   给真实对象提供一个替身，以控制对这个对象的访问  

	- 装饰者为对象增加额外的行为，而代理是控制对象的访问。
	- 适配器和代理都是挡在其他对象的前面，并负责将请求转发给他们。适配器会提供不同的接口用于适配，而代理则实现相同的接口。
	- 外观模式是包装许多对象以简化他们的接口

### 适配器模式(Adapter)
      将一个或多个接口改变为用户所期望的另一个接口。Adapter模式使得原本由于接口不兼容而不能一起工作那些类可以一起工作。

### 装饰者模式(Decrator)：
	  不改变接口，但动态的加入责任。装饰者提供有别于继承的另一种选择，比继承更具有扩展性。(例如：java.IO包)

### 桥接模式(Bridge)：
	  将抽象部分与它的实现部分相分离，使他们可以独立的变化。

### 享元模式(Flyweight):


## 行为型：

### 迭代器模式(Iterator):
	   提供一种顺序访问聚合对象元素的方法，而又不暴露其内部元素, 迭代器将遍历聚合对象的任务封装到一个对象(可以是聚合对象中也可以是自定义的迭代器对象)中。

### 观察者模式(Observer)(发布+订阅)：
	  定义对象间一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知自动更新。

### 模板方法模式(Template Method):
	   定义了一个算法的框架，允许继承的子类为其提供一个或多个步骤的实现方法或可选的实现方法(hook方法)

	   - 模板方法和策略方法都封装算法，模板使用继承，策略使用组合

### 命令模式(Command)：
      将请求封装成对象，使不同的请求、日志、队列来参数化其他对象。

### 状态模式(State)：
       允许对象在内部状态改变时改变他的行为，对象看起来好像修改了他的类

### 策略模式(Strategy)：
	  将算法簇封装起来，使使用算法的客体和算法之间相互独立。

	  - 模板方法和策略方法都封装算法，模板使用继承，策略使用组合

### 职责链模式(Chain of Responsibility):
	  使多个对象都有机会处理请求，从而避免请求的送发者和接收者之间的耦合关系。

### 中介者模式(Mediator):
	  用一个中介对象封装一些列的对象交互。

### 访问者模式(Visitor):
	  表示一个作用于某对象结构中的各元素的操作，它使你可以在不改变各元素类的前提下定义作用于这个元素的新操作。

### 解释器模式(Interpreter):
	  给定一个语言，定义他的文法的一个表示，并定义一个解释器，这个解释器使用该表示来解释语言中的句子。

### 备忘录模式(Memento):
	  在不破坏对象的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。

